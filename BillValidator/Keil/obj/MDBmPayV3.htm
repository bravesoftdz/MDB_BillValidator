<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\MDBmPayV3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\MDBmPayV3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Sep 04 00:04:28 2017
<BR><P>
<H3>Maximum Stack Usage =        156 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Device_Init &rArr; Uart_Init_MdbSlave &rArr; UART_SetConfig &rArr; uart_set_divisors &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[51]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">os_error</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC_IRQHandler</a><BR>
 <LI><a href="#[27]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">os_idle_demon</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[12]">BOD_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[f]">COMP_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[16]">DMA_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[7]">I2C_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[13]">PIOINT0_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[14]">PIOINT1_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[15]">PIOINT2_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from hal_cm1.o(.emb_text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[c]">SSP_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from hal_cm1.o(.emb_text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from hal_cm1.o(.emb_text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[1b]">SystemInit</a> from system_lpc12xx.o(.text) referenced from startup_lpc12xx.o(.text)
 <LI><a href="#[8]">TIMER16_0_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[9]">TIMER16_1_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[a]">TIMER32_0_IRQHandler</a> from time.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[b]">TIMER32_1_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[d]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[e]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[6]">WAKEUP_IRQHandler</a> from startup_lpc12xx.o(.text) referenced 12 times from startup_lpc12xx.o(RESET)
 <LI><a href="#[11]">WDT_IRQHandler</a> from startup_lpc12xx.o(.text) referenced from startup_lpc12xx.o(RESET)
 <LI><a href="#[1c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc12xx.o(.text)
 <LI><a href="#[18]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[27]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[19]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm1.o(.emb_text)
 <LI><a href="#[24]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced 4 times from ledtask.o(.text)
 <LI><a href="#[1a]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm1.o(.emb_text)
 <LI><a href="#[25]">rt_sem_init</a> from rt_semaphore.o(i.rt_sem_init) referenced 2 times from mdbslavetask.o(.text)
 <LI><a href="#[26]">rt_sem_wait</a> from rt_semaphore.o(i.rt_sem_wait) referenced 3 times from mdbslavetask.o(.text)
 <LI><a href="#[23]">rt_sys_init</a> from rt_task.o(i.rt_sys_init) referenced from main.o(.text)
 <LI><a href="#[1e]">rt_tsk_create</a> from rt_task.o(i.rt_tsk_create) referenced from main.o(.text)
 <LI><a href="#[21]">rt_tsk_delete</a> from rt_task.o(i.rt_tsk_delete) referenced from main.o(.text)
 <LI><a href="#[1f]">tsk_ComHost</a> from comhosttask.o(.text) referenced from main.o(.text)
 <LI><a href="#[20]">tsk_Led</a> from ledtask.o(.text) referenced from main.o(.text)
 <LI><a href="#[1d]">tsk_MdbSlave</a> from mdbslavetask.o(.text) referenced from main.o(.text)
 <LI><a href="#[22]">tsk_System_Initial</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[28]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[92]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ad]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ae]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[af]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a4]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm1.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[aa]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm1.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[34]"></a>os_set_env</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm1.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm1.o(.emb_text), UNUSED)

<P><STRONG><a name="[b3]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm1.o(.emb_text), UNUSED)

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, hal_cm1.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hal_cm1.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm1.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm1.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PIOINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PIOINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PIOINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SSP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc12xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>tsk_System_Initial</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>Device_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Device_Init &rArr; Uart_Init_MdbSlave &rArr; UART_SetConfig &rArr; uart_set_divisors &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mode_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init_MdbSlave
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = main &rArr; Device_Init &rArr; Uart_Init_MdbSlave &rArr; UART_SetConfig &rArr; uart_set_divisors &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[20]"></a>tsk_Led</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, ledtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tsk_Led &rArr; COM_LedFlashLoop &rArr; COM_LedFlash &rArr; GPIO_SetLowLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetLowLevel
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHighLevel
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedFlashLoop
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUJI_LedFlash
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedFlash
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_LedFlashLoop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_LedFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>tsk_MdbSlave</STRONG> (Thumb, 668 bytes, Stack size 8 bytes, mdbslavetask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tsk_MdbSlave &rArr; MdbSlave_Responses &rArr; Uart0_BuffFill
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Responses
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Response
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_CheckFcc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_SetSecurityLevels
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_SetEscrowStatus
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_SetBillType
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_SetBillEscrowEnable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>tsk_ComHost</STRONG> (Thumb, 1326 bytes, Stack size 24 bytes, comhosttask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tsk_ComHost &rArr; ComHost_Send &rArr; Uart1_BuffFill
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_Send
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_CheckFcc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ISP_Key_Pressed
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>BillValidator_SetSecurityLevels</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, billvalidator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
</UL>

<P><STRONG><a name="[41]"></a>BillValidator_SetBillType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, billvalidator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
</UL>

<P><STRONG><a name="[42]"></a>BillValidator_SetBillEscrowEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, billvalidator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
</UL>

<P><STRONG><a name="[43]"></a>BillValidator_SetEscrowStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, billvalidator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
</UL>

<P><STRONG><a name="[3d]"></a>BillValidator_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, billvalidator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BillValidator_Init &rArr; BillValidator_Init_IEXPANSION02 &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_Init_IEXPANSION02
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_Setup_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
</UL>

<P><STRONG><a name="[27]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[a9]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[51]"></a>os_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
</UL>

<P><STRONG><a name="[a5]"></a>rt_init_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[a7]"></a>rt_chk_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[2a]"></a>rt_stk_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[52]"></a>Timer_Stop_MdbSlave</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_Stop_MdbSlave
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_ResetCounter
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_Cmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_ClearIntPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Rx
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER32_0_IRQHandler &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_GetIntStatusReg
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_ClearIntPendingBit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop_MdbSlave
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>Timer_Init_MdbSlave</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Timer_Init_MdbSlave &rArr; TIM32_Init &rArr; TIM32_ConverUSecToVal &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ConfigAHBCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[5a]"></a>Timer_Start_MdbSlave</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timer_Start_MdbSlave &rArr; TIM32_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_ResetCounter
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_ConfigMatch
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_Cmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_ClearIntPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Rx
</UL>

<P><STRONG><a name="[5c]"></a>Uart0_Bit9Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Tx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_ReResponse
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Responses
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Response
</UL>

<P><STRONG><a name="[63]"></a>Uart0_Bit9Get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Tx
</UL>

<P><STRONG><a name="[b4]"></a>Uart1_Bit9Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>Uart1_Bit9Get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>Uart0_BuffSetChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>Uart0_BuffAddChar</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Responses
</UL>

<P><STRONG><a name="[5e]"></a>Uart0_BuffFill</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart0_BuffFill
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Tx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_ReResponse
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Responses
</UL>

<P><STRONG><a name="[60]"></a>Uart1_BuffAddChar</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_Send
</UL>

<P><STRONG><a name="[61]"></a>Uart1_BuffFill</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart1_BuffFill
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_Tx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_Send
</UL>

<P><STRONG><a name="[44]"></a>MdbSlave_Response</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MdbSlave_Response &rArr; UART_ConfigInts
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Bit9Set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
</UL>

<P><STRONG><a name="[45]"></a>MdbSlave_Responses</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MdbSlave_Responses &rArr; Uart0_BuffFill
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_BuffFill
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_BuffAddChar
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Bit9Set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
</UL>

<P><STRONG><a name="[5f]"></a>MdbSlave_ReResponse</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_BuffFill
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Bit9Set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>

<P><STRONG><a name="[48]"></a>ComHost_Send</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ComHost_Send &rArr; Uart1_BuffFill
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_BuffFill
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_BuffAddChar
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_ComHost
</UL>

<P><STRONG><a name="[62]"></a>MdbSlave_Tx</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MdbSlave_Tx &rArr; Uart0_BuffFill
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_BuffFill
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Bit9Get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Bit9Set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_MdbSlave
</UL>

<P><STRONG><a name="[65]"></a>ComHost_Tx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComHost_Tx &rArr; Uart1_BuffFill
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_BuffFill
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_ComHost
</UL>

<P><STRONG><a name="[66]"></a>ComHost_Rx</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ComHost_Rx &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_ComHost
</UL>

<P><STRONG><a name="[3e]"></a>MdbSlave_CheckFcc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MdbSlave_CheckFcc
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Rx
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
</UL>

<P><STRONG><a name="[67]"></a>MdbSlave_Rx</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MdbSlave_Rx &rArr; Timer_Start_MdbSlave &rArr; TIM32_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Start_MdbSlave
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop_MdbSlave
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_CheckFcc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_MdbSlave
</UL>

<P><STRONG><a name="[49]"></a>ComHost_CheckFcc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComHost_CheckFcc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_ComHost
</UL>

<P><STRONG><a name="[68]"></a>UART_IRQHandler_ComHost</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_IRQHandler_ComHost &rArr; ComHost_Rx &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetINTStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_Rx
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>UART_IRQHandler_MdbSlave</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_IRQHandler_MdbSlave &rArr; MdbSlave_Rx &rArr; Timer_Start_MdbSlave &rArr; TIM32_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetINTStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Rx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART0_IRQHandler &rArr; UART_IRQHandler_MdbSlave &rArr; MdbSlave_Rx &rArr; Timer_Start_MdbSlave &rArr; TIM32_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_MdbSlave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART1_IRQHandler &rArr; UART_IRQHandler_ComHost &rArr; ComHost_Rx &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_ComHost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>Cashless_SetupConfig_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>Cashless_RequestId_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[6c]"></a>Cashless_BeginSession_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>

<P><STRONG><a name="[6d]"></a>Uart_Init_VtsSlave</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigTXD
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetUART0ClockDiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetPeripheral
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_SetFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ConfigAHBCLK
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>

<P><STRONG><a name="[31]"></a>Uart_Init_ComHost</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Uart_Init_ComHost &rArr; UART_SetConfig &rArr; uart_set_divisors &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigTXD
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetUART1ClockDiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetPeripheral
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_SetFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ConfigAHBCLK
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[7a]"></a>Uart_Init_ComSlave</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigTXD
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetUART0ClockDiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetPeripheral
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_SetFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ConfigAHBCLK
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>

<P><STRONG><a name="[7b]"></a>Uart_Init_MdbHost</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigTXD
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetUART1ClockDiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetPeripheral
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_SetFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ConfigAHBCLK
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetLowLevel
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHighLevel
</UL>

<P><STRONG><a name="[32]"></a>Uart_Init_MdbSlave</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Uart_Init_MdbSlave &rArr; UART_SetConfig &rArr; uart_set_divisors &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigTXD
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetUART0ClockDiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetPeripheral
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_SetFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ConfigAHBCLK
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[7c]"></a>MDB_Decimal_Place_Init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MDB_Decimal_Place_Init &rArr; IOCON_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_SetFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ConfigAHBCLK
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHighLevel
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mode_Init
</UL>

<P><STRONG><a name="[7d]"></a>MDB_Address_Mode_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MDB_Address_Mode_Init &rArr; IOCON_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_SetFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ConfigAHBCLK
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetLowLevel
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mode_Init
</UL>

<P><STRONG><a name="[30]"></a>Uart_Mode_Init</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Uart_Mode_Init &rArr; MDB_Address_Mode_Init &rArr; IOCON_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_SetFunc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Address_Mode_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Decimal_Place_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ConfigAHBCLK
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_SetMask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setvalue
</UL>

<P><STRONG><a name="[35]"></a>GPIO_GetPinValue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_GetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_getvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Address_Mode_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Decimal_Place_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ISP_Key_Pressed
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUJI_LedFlash
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedFlash
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_LedFlash
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_Led
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mode_Init
</UL>

<P><STRONG><a name="[b8]"></a>GPIO_SetOutValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc12xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>GPIO_SetHighLevel</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetHighLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Decimal_Place_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUJI_LedFlash
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedFlash
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_LedFlash
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_Led
</UL>

<P><STRONG><a name="[36]"></a>GPIO_SetLowLevel</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetLowLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Address_Mode_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUJI_LedFlash
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedFlash
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_LedFlash
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_Led
</UL>

<P><STRONG><a name="[81]"></a>GPIO_SetInvert</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setvalue
</UL>

<P><STRONG><a name="[70]"></a>GPIO_SetDir</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Address_Mode_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Decimal_Place_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mode_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[82]"></a>GPIO_GetDir</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_getvalue
</UL>

<P><STRONG><a name="[83]"></a>GPIO_IntSetType</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[84]"></a>GPIO_IntSetMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setvalue
</UL>

<P><STRONG><a name="[85]"></a>GPIO_IntGetRawStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_getvalue
</UL>

<P><STRONG><a name="[86]"></a>GPIO_IntGetMaskStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_getvalue
</UL>

<P><STRONG><a name="[87]"></a>GPIO_IntClear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc12xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setvalue
</UL>

<P><STRONG><a name="[6f]"></a>IOCON_SetFunc</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, lpc12xx_iocon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOCON_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Address_Mode_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Decimal_Place_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mode_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[6e]"></a>IOCON_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc12xx_iocon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Address_Mode_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Decimal_Place_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mode_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[b9]"></a>SYS_GetResetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>SYS_SetMemMap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>SYS_SelectSystemPLLCLKSource</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>SYS_ConfigSystemPLL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>SYS_SelectMainCLKSource</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>SYS_SetAHBClockDiv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>SYS_ConfigAHBCLK</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Address_Mode_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_Decimal_Place_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mode_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init_MdbSlave
</UL>

<P><STRONG><a name="[bf]"></a>SYS_ConfigWDTOSC</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>SYS_ConfigCLKOUTCLK</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>SYS_ResetPeripheral</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[c1]"></a>SYS_FlashOneCycleReadModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>SYS_SetSSPClockDiv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>SYS_SetUART0ClockDiv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
</UL>

<P><STRONG><a name="[79]"></a>SYS_SetUART1ClockDiv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[c3]"></a>SYS_SetGlitchFilter0ClockDiv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>SYS_SetGlitchFilter1ClockDiv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>SYS_SetGlitchFilter2ClockDiv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>SYS_SetGlitchFilter3ClockDiv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>SYS_SetGlitchFilter4ClockDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>SYS_SetGlitchFilter5ClockDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>SYS_SetGlitchFilter6ClockDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>SYS_ConfigDeepSleep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>SYS_ConfigPowerDown</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>SYS_ConfigWakeUp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>SYS_NMIInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>SYS_EnableStartLogic0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>SYS_SetStartLogic0Edge</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>SYS_ResetStartLogic0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>SYS_EnableStartLogic1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>SYS_SetStartLogic1Edge</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>SYS_ResetStartLogic1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>SYS_GetDeviceID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc12xx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>TIM32_ConverUSecToVal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc12xx_timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM32_ConverUSecToVal &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_Init
</UL>

<P><STRONG><a name="[d5]"></a>TIM32_GetIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>TIM32_GetIntStatusReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>TIM32_ClearIntPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Start_MdbSlave
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop_MdbSlave
</UL>

<P><STRONG><a name="[d6]"></a>TIM32_DeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>TIM32_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lpc12xx_timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM32_Init &rArr; TIM32_ConverUSecToVal &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_ConverUSecToVal
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init_MdbSlave
</UL>

<P><STRONG><a name="[d7]"></a>TIM32_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>TIM32_ConfigMatch</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, lpc12xx_timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM32_ConfigMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Start_MdbSlave
</UL>

<P><STRONG><a name="[d8]"></a>TIM32_ConfigCapture</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, lpc12xx_timer32.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>TIM32_ConfigPWM</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, lpc12xx_timer32.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>TIM32_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Start_MdbSlave
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop_MdbSlave
</UL>

<P><STRONG><a name="[54]"></a>TIM32_ResetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Start_MdbSlave
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop_MdbSlave
</UL>

<P><STRONG><a name="[da]"></a>TIM32_GetTCValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>TIM32_GetCaptureValue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>TIM32_ClearPWMOuptut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>TIM32_ClearAllPWM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_timer32.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>UART_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lpc12xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_num
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[76]"></a>UART_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lpc12xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART_SetConfig &rArr; uart_set_divisors &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_num
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[75]"></a>UART_GetConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc12xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_num
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[77]"></a>UART_ConfigTXD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc12xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[de]"></a>UART_Send</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lpc12xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>UART_Receive</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lpc12xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>UART_GetLineStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc12xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_MdbSlave
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_ComHost
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Tx
</UL>

<P><STRONG><a name="[47]"></a>UART_ConfigInts</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lpc12xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_ConfigInts
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_num
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Rx
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_Tx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Tx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_ReResponse
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_Send
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Responses
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Response
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[69]"></a>UART_GetINTStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc12xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_MdbSlave
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler_ComHost
</UL>

<P><STRONG><a name="[e0]"></a>UART_StartAutoBaud</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc12xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>UART_ClearAutoBaud</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc12xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, system_lpc12xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1b]"></a>SystemInit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, system_lpc12xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc12xx.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_ComHost
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_ConverUSecToVal
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM32_ConverUSecToVal
</UL>

<P><STRONG><a name="[e3]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_Setup_Init
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cashless_RequestId_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_Init_IEXPANSION02
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_ComHost
</UL>

<P><STRONG><a name="[e8]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cashless_BeginSession_Init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_ComHost
</UL>

<P><STRONG><a name="[ea]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ec]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ed]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ee]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mdbslavetask.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntSetType
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Rx
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_MdbSlave
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_ComHost
</UL>

<P><STRONG><a name="[ef]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a3]"></a>_init_box</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[57]"></a>isr_sem_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdbSlave_Rx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHost_Rx
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[2e]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[19]"></a>rt_alloc_box</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm1.o(.emb_text)
</UL>
<P><STRONG><a name="[95]"></a>rt_block</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[99]"></a>rt_dec_dly</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[9b]"></a>rt_dispatch</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[24]"></a>rt_dly_wait</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ledtask.o(.text)
<LI> uart.o(.text)
<LI> comhosttask.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>rt_evt_psh</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[1a]"></a>rt_free_box</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm1.o(.emb_text)
</UL>
<P><STRONG><a name="[97]"></a>rt_get_first</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[a0]"></a>rt_init_stack</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, hal_cm1.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[a1]"></a>rt_mbx_psh</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2b]"></a>rt_pop_req</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[94]"></a>rt_psh_req</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>

<P><STRONG><a name="[93]"></a>rt_psq_enq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>

<P><STRONG><a name="[96]"></a>rt_put_dly</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[9a]"></a>rt_put_prio</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[9c]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[9e]"></a>rt_rmv_dly</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
</UL>

<P><STRONG><a name="[ab]"></a>rt_rmv_list</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[25]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR>[Address Reference Count : 2]<UL><LI> mdbslavetask.o(.text)
<LI> comhosttask.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>rt_sem_psh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[26]"></a>rt_sem_wait</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mdbslavetask.o(.text)
<LI> comhosttask.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[23]"></a>rt_sys_init</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>rt_systick</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a8]"></a>rt_tmr_tick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_timer.o(i.rt_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tmr_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1e]"></a>rt_tsk_create</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>rt_tsk_delete</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3c]"></a>MDB_LedFlash</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ledtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDB_LedFlash &rArr; GPIO_SetLowLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetLowLevel
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHighLevel
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_LedFlashLoop
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_Led
</UL>

<P><STRONG><a name="[3b]"></a>MDB_LedFlashLoop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ledtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDB_LedFlashLoop &rArr; MDB_LedFlash &rArr; GPIO_SetLowLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_LedFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_Led
</UL>

<P><STRONG><a name="[3a]"></a>COM_LedFlash</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ledtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COM_LedFlash &rArr; GPIO_SetLowLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetLowLevel
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHighLevel
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedFlashLoop
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_Led
</UL>

<P><STRONG><a name="[38]"></a>FUJI_LedFlash</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ledtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FUJI_LedFlash &rArr; GPIO_SetLowLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetLowLevel
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHighLevel
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_Led
</UL>

<P><STRONG><a name="[39]"></a>COM_LedFlashLoop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ledtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = COM_LedFlashLoop &rArr; COM_LedFlash &rArr; GPIO_SetLowLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_Led
</UL>

<P><STRONG><a name="[4b]"></a>Check_ISP_Key_Pressed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, comhosttask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_ISP_Key_Pressed &rArr; GPIO_GetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_ComHost
</UL>

<P><STRONG><a name="[4d]"></a>BillValidator_Setup_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, billvalidator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BillValidator_Setup_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_Init
</UL>

<P><STRONG><a name="[4e]"></a>BillValidator_Init_IEXPANSION02</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, billvalidator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BillValidator_Init_IEXPANSION02 &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValidator_Init
</UL>

<P><STRONG><a name="[78]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[71]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbHost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComSlave
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_VtsSlave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_MdbSlave
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_ComHost
</UL>

<P><STRONG><a name="[80]"></a>gpio_getvalue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lpc12xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntGetMaskStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntGetRawStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetDir
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
</UL>

<P><STRONG><a name="[7f]"></a>gpio_setvalue</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc12xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntSetMask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInvert
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMask
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetLowLevel
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetHighLevel
</UL>

<P><STRONG><a name="[8b]"></a>uart_set_divisors</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, lpc12xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[8c]"></a>uart_get_num</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc12xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetConfig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigInts
</UL>

<P><STRONG><a name="[9f]"></a>rt_init_context</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
